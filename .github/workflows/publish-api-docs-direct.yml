name: Publish API Documentation to GitBook (Direct API)

on:
  push:
    branches: [main]
    paths:
      - 'src/**'
      - 'build.gradle'
      - 'gradle/**'
  pull_request:
    branches: [main]
    paths:
      - 'src/**'
      - 'build.gradle'
      - 'gradle/**'
  workflow_dispatch:

jobs:
  build-and-publish:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: 17
          cache: 'gradle'

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Build Application
        env:
          SPRING_PROFILES_ACTIVE: dev
        run: ./gradlew clean build -x test

      - name: Start Application and Generate OpenAPI
        run: |
          # 애플리케이션을 백그라운드에서 시작
          nohup ./gradlew bootRun --args='--spring.profiles.active=dev' > app.log 2>&1 &
          APP_PID=$!
          
          # 애플리케이션 시작 대기
          echo "Waiting for application to start..."
          for i in {1..30}; do
            if curl -s http://localhost:8080/health > /dev/null 2>&1; then
              echo "Application started successfully"
              break
            fi
            if [ $i -eq 30 ]; then
              echo "Application failed to start within 30 seconds"
              cat app.log
              exit 1
            fi
            sleep 1
          done
          
          # OpenAPI JSON 다운로드
          echo "Downloading OpenAPI JSON..."
          curl -s http://localhost:8080/v3/api-docs > openapi.json
          
          # 애플리케이션 종료
          kill $APP_PID
          
          # OpenAPI JSON 검증
          if [ -s openapi.json ]; then
            echo "OpenAPI JSON generated successfully"
            echo "File size: $(wc -c < openapi.json) bytes"
          else
            echo "Failed to generate OpenAPI JSON"
            exit 1
          fi

      - name: Publish to GitBook via Direct API (Main Branch Only)
        if: github.ref == 'refs/heads/main'
        env:
          GITBOOK_TOKEN: ${{ secrets.GITBOOK_TOKEN }}
        run: |
          echo "Publishing OpenAPI spec to GitBook via direct API..."
          
          # GitBook API v1 엔드포인트 (OpenAPI 스펙 업로드)
          # 참고: https://docs.gitbook.com/api-reference/content-api
          
          # 1. 먼저 스페이스 정보 확인
          echo "Checking GitBook space information..."
          SPACE_RESPONSE=$(curl -s -w "%{http_code}" \
            -H "Authorization: Bearer $GITBOOK_TOKEN" \
            "https://api.gitbook.com/v1/spaces/${{ secrets.GITBOOK_ORG }}")
          
          SPACE_HTTP_CODE="${SPACE_RESPONSE: -3}"
          SPACE_BODY="${SPACE_RESPONSE%???}"
          
          if [ "$SPACE_HTTP_CODE" -ne 200 ]; then
            echo "Failed to access GitBook space. HTTP Code: $SPACE_HTTP_CODE"
            echo "Response: $SPACE_BODY"
            exit 1
          fi
          
          echo "GitBook space accessible successfully"
          
          # 2. OpenAPI 스펙 업로드
          echo "Uploading OpenAPI specification..."
          
          # GitBook API를 통해 OpenAPI 스펙 업로드
          # 방법 1: API 스펙 엔드포인트 사용
          API_RESPONSE=$(curl -s -w "%{http_code}" -X POST \
            -H "Authorization: Bearer $GITBOOK_TOKEN" \
            -H "Content-Type: application/json" \
            -d @openapi.json \
            "https://api.gitbook.com/v1/spaces/${{ secrets.GITBOOK_ORG }}/content/api/${{ secrets.GITBOOK_SPEC }}")
          
          API_HTTP_CODE="${API_RESPONSE: -3}"
          API_BODY="${API_RESPONSE%???}"
          
          if [ "$API_HTTP_CODE" -eq 200 ] || [ "$API_HTTP_CODE" -eq 201 ]; then
            echo "Successfully published to GitBook!"
            echo "Response: $API_BODY"
          else
            echo "Failed to publish via API endpoint. HTTP Code: $API_HTTP_CODE"
            echo "Response: $API_BODY"
            
            # 방법 2: 대안 - 파일 업로드 방식
            echo "Trying alternative upload method..."
            ALT_RESPONSE=$(curl -s -w "%{http_code}" -X PUT \
              -H "Authorization: Bearer $GITBOOK_TOKEN" \
              -H "Content-Type: application/json" \
              -d @openapi.json \
              "https://api.gitbook.com/v1/spaces/${{ secrets.GITBOOK_ORG }}/content/api/${{ secrets.GITBOOK_SPEC }}")
            
            ALT_HTTP_CODE="${ALT_RESPONSE: -3}"
            ALT_BODY="${ALT_RESPONSE%???}"
            
            if [ "$ALT_HTTP_CODE" -eq 200 ] || [ "$ALT_HTTP_CODE" -eq 201 ]; then
              echo "Successfully published to GitBook via alternative method!"
              echo "Response: $ALT_BODY"
            else
              echo "All upload methods failed. HTTP Code: $ALT_HTTP_CODE"
              echo "Response: $ALT_BODY"
              exit 1
            fi
          fi

      - name: Upload OpenAPI JSON as Artifact
        uses: actions/upload-artifact@v4
        with:
          name: openapi-spec
          path: openapi.json
          retention-days: 30

      - name: Comment PR with API Changes (PR Only)
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            let openapiContent = '';
            try {
              openapiContent = fs.readFileSync('openapi.json', 'utf8');
            } catch (error) {
              console.log('OpenAPI JSON not found');
            }
            
            const comment = `## API Documentation Generated ✅
            
            OpenAPI specification has been generated successfully.
            
            **Summary:**
            - OpenAPI JSON: ${openapiContent ? '✅ Generated' : '❌ Failed'}
            - File Size: ${openapiContent ? (openapiContent.length / 1024).toFixed(2) + ' KB' : 'N/A'}
            
            **Next Steps:**
            - Merge this PR to automatically publish to GitBook
            - API documentation will be available at your GitBook space
            
            <details>
            <summary>OpenAPI Preview (First 1000 chars)</summary>
            
            \`\`\`json
            ${openapiContent ? openapiContent.substring(0, 1000) + '...' : 'No content available'}
            \`\`\`
            
            </details>`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            }); 